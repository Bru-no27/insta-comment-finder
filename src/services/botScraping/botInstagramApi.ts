
import type { InstagramApiResponse } from '../instagram/types';
import { BotPoolManager } from './botPoolManager';
import { PuppeteerScraper } from './puppeteerScraper';
import { extractPostId } from '../instagram/utils';

export class BotInstagramApi {
  private static botManager = BotPoolManager.getInstance();

  public static async fetchCommentsViaBot(
    postUrl: string,
    filter?: string
  ): Promise<InstagramApiResponse> {
    console.log('ü§ñ Iniciando busca via sistema de conta-bot...');
    
    const postId = extractPostId(postUrl);
    if (!postId) {
      return {
        comments: [],
        total: 0,
        status: 'error',
        message: 'URL do Instagram inv√°lida'
      };
    }

    // Verifica status do pool de bots
    const poolStatus = this.botManager.getPoolStatus();
    console.log(`üìä Status do pool: ${poolStatus.available}/${poolStatus.total} bots dispon√≠veis`);

    if (poolStatus.available === 0) {
      return {
        comments: [],
        total: 0,
        status: 'error',
        message: `‚ùå Nenhuma conta bot dispon√≠vel no momento.
        
        üìä Status atual:
        ‚Ä¢ Total de contas: ${poolStatus.total}
        ‚Ä¢ Ativas: ${poolStatus.active}
        ‚Ä¢ Em cooldown: ${poolStatus.inCooldown}
        
        ‚è±Ô∏è Aguarde alguns minutos para as contas sa√≠rem do cooldown.`
      };
    }

    // Seleciona bot dispon√≠vel
    const selectedBot = this.botManager.getAvailableBot();
    if (!selectedBot) {
      return {
        comments: [],
        total: 0,
        status: 'error',
        message: 'Erro interno: n√£o foi poss√≠vel selecionar conta bot'
      };
    }

    try {
      // Executa scraping via Puppeteer
      const scrapingResult = await PuppeteerScraper.scrapeComments(
        postUrl,
        selectedBot,
        filter
      );

      if (scrapingResult.success) {
        // Marca bot como bem-sucedido
        this.botManager.markBotSuccess(selectedBot.id);

        return {
          comments: scrapingResult.comments,
          total: scrapingResult.comments.length,
          status: 'success',
          message: `ü§ñ ${scrapingResult.comments.length} coment√°rios REAIS extra√≠dos via conta-bot ${selectedBot.id}!
          
          ‚úÖ Scraping bem-sucedido:
          ‚Ä¢ Conta bot: ${selectedBot.id}
          ‚Ä¢ M√©todo: Puppeteer headless
          ‚Ä¢ Dados: 100% reais do Instagram
          ‚Ä¢ Limita√ß√µes: Nenhuma (exceto rate limits naturais)
          
          üéØ Sistema funcionando perfeitamente!`
        };
      } else {
        // Marca bot como com falha
        this.botManager.markBotFailed(selectedBot.id);

        return {
          comments: [],
          total: 0,
          status: 'error',
          message: `‚ùå Falha no scraping com conta ${selectedBot.id}: ${scrapingResult.error}`
        };
      }

    } catch (error) {
      console.error('‚ùå Erro no sistema de bot:', error);
      this.botManager.markBotFailed(selectedBot.id);

      return {
        comments: [],
        total: 0,
        status: 'error',
        message: `‚ùå Erro interno no sistema de conta-bot: ${error}`
      };
    }
  }

  // Status detalhado do sistema
  public static getSystemStatus() {
    const poolStatus = this.botManager.getPoolStatus();
    
    return {
      isOperational: poolStatus.available > 0,
      poolStatus,
      message: poolStatus.available > 0 
        ? `‚úÖ Sistema operacional com ${poolStatus.available} bot(s) dispon√≠vel(is)`
        : `‚ö†Ô∏è Sistema em cooldown - aguarde ${Math.ceil(5)} minutos`,
      recommendations: [
        poolStatus.total < 3 ? '‚ö†Ô∏è Recomendado ter pelo menos 3 contas bot' : '‚úÖ Pool de contas adequado',
        poolStatus.active < poolStatus.total ? '‚ö†Ô∏è Algumas contas inativas - verificar configura√ß√£o' : '‚úÖ Todas as contas ativas'
      ]
    };
  }
}
